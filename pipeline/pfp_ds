#!/usr/bin/env python3

# Edited from bigbwt script file

import sys, time, argparse, subprocess, os.path

Description = """
Tool to build the BWT for higly repetive files using the approach
described in

   "PFP Data Structures"
   by Christina Boucher, OndÅ™ej Cvacho, Travis Gagie, Jan Holub, Giovanni Manzini, and Massimiliano Rossi

The input file cannot contain the characters 0, 1 or 2 which are
used internally by the algorithm.
"""

dirname         = os.path.dirname(os.path.abspath(__file__))

bigbwt_dirname  = os.path.join(dirname, "_deps/bigbwt-build")
ds_dirname      = os.path.join(dirname, "test/src")

parse_exe       = os.path.join(bigbwt_dirname, "newscan.x")
parseNT_exe     = os.path.join(bigbwt_dirname, "newscanNT.x")
build_pfp_ds          = os.path.join(ds_dirname, "ds_building")
build_pfp_ds64          = os.path.join(ds_dirname, "ds_building64")


def main():
  parser = argparse.ArgumentParser(description=Description, formatter_class=argparse.RawTextHelpFormatter)
  parser.add_argument('input', help='input file name', type=str)
  parser.add_argument('-w', '--wsize', help='sliding window size (def. 10)', default=10, type=int)
  parser.add_argument('-p', '--mod', help='hash modulus (def. 100)', default=100, type=int)
  parser.add_argument('-t', help='number of helper threads (def. None)', default=0, type=int)
 # parser.add_argument('-s',  help='compute the start run-length sampled Suffix Array',action='store_true')
 # parser.add_argument('-e',  help='compute the end run-length sampled Suffix Array',action='store_true')
 # parser.add_argument('-S',  help='compute the full Suffix Array',action='store_true')
  parser.add_argument('-k',  help='keep temporary files',action='store_true')
  parser.add_argument('-v',  help='verbose',action='store_true')
 # parser.add_argument('-c',  help='check BWT using SACA-K',action='store_true')
  parser.add_argument('-f', help='read fasta',action='store_true')
  parser.add_argument('-s', help='store ds',action='store_true')
  parser.add_argument('-m', help='print memory usage',action='store_true')
 # parser.add_argument('--sum', help='compute output files sha256sum',action='store_true')
  parser.add_argument('--parsing',  help='stop after the parsing phase (debug only)',action='store_true')
  parser.add_argument('--compress',  help='compress output of the parsing phase (debug only)',action='store_true')
  args = parser.parse_args()

  if args.f and args.t > 0 and (".fq" in args.input or ".fastq" in args.input or ".fnq" in args.input):
    print("bigbwt does not current support FASTQ format! Exiting...")
    return

  

  logfile_name = args.input + ".log"
  # get main bigbwt directory
  args.bigbwt_dir = os.path.split(sys.argv[0])[0]
  print("Sending logging messages to file:", logfile_name)
  with open(logfile_name,"a") as logfile:

    # ---------- parsing of the input file
    start0 = start = time.time()
    if args.t>0:
      command = "{exe} {file} -w {wsize} -p {modulus} -t {th}".format(
              exe = os.path.join(args.bigbwt_dir,parse_exe),
              wsize=args.wsize, modulus = args.mod, th=args.t, file=args.input)
    else:
      command = "{exe} {file} -w {wsize} -p {modulus}".format(
              exe = os.path.join(args.bigbwt_dir,parseNT_exe),
              wsize=args.wsize, modulus = args.mod, file=args.input)
    if args.v: command += " -v"
    if args.f: command += " -f"
    print("==== Parsing. Command:", command)
    if(execute_command(command,logfile,logfile_name)!=True):
      return
    print("Elapsed time: {0:.4f}".format(time.time()-start))
    if args.parsing:
      # delete temporary parsing files
      command = "rm -f {file}.parse_old {file}.last".format(file=args.input) # check format when -t is used
      if(execute_command(command,logfile,logfile_name)!=True):
        return
      print("==== Stopping after the parsing phase as requested")
      return
    elif args.compress:
      # save parsing files
      start = time.time()
      command = "tar -cJf {file}.parse.txz {file}.parse {file}.dict".format(file=args.input)
      print("==== Compressing. Command:", command)
      if(execute_command(command,logfile,logfile_name,env={"XZ_OPT":"-9"})!=True):
        return
      print("Elapsed time: {0:.4f}".format(time.time()-start))
      delete_temp_files(args,logfile,logfile_name)
      print("==== Done: Parsing output xz-compressed as requested")
      return

    # ----------- computation of the PFP data structures
    start = time.time()
    parse_size = os.path.getsize(args.input+".parse")/4
    dictionary_size = os.path.getsize(args.input+".dict")

    if(parse_size >=  (2**31-1) or dictionary_size >=  (2**31-1) ):
      command = "{exe} {file} -w {wsize}".format(
                exe = os.path.join(args.bigbwt_dir,build_pfp_ds64),
                wsize=args.wsize, file=args.input)
    else:
      command = "{exe} {file} -w {wsize}".format(
          exe = os.path.join(args.bigbwt_dir,build_pfp_ds),
          wsize=args.wsize, file=args.input)

    if args.s: command += " -s"
    if args.m: command += " -m"
    
    print("==== Computing PFP data structures. Command:", command)
    if(execute_command(command,logfile,logfile_name)!=True):
      return
    print("Elapsed time: {0:.4f}".format(time.time()-start));
    print("Total construction time: {0:.4f}".format(time.time()-start0))
    # ---- print elapsed time to file
    command = "echo Total construction time: {0:.4f}".format(time.time()-start0)
    if(execute_command(command,logfile,logfile_name)!=True):
      return
    # ---- delete intermediate files
    delete_temp_files(args,logfile,logfile_name)

    # --- start checking ---
 
    # --- end checking ---

  print("==== Done")

# delete intermediate files
def delete_temp_files(args,logfile,logfile_name):
    if args.k==False:
      print("==== Deleting temporary files.") # no need to show the command
      command = "rm -f {file}.parse_old {file}.last".format(file=args.input)
      #command = "rm -f {file}.parse {file}.parse_old {file}.last {file}.bwlast {file}.dict {file}.ilist {file}.occ".format(file=args.input)
      if(execute_command(command,logfile,logfile_name)!=True):
        return
      for i in range(args.t):
        command = "rm -f {file}.{i}.parse_old {file}.{i}.last".format(file=args.input, i=i)
        if(execute_command(command,logfile,logfile_name)!=True):
          return


# compute hash digest for a file
def file_digest(name,logfile):
    try:
      hash_command = "{exe} {infile}".format(exe=shasum_exe, infile=name)
      hashsum = subprocess.check_output(hash_command.split(),stderr=logfile)
      hashsum = hashsum.decode("utf-8").split()[0]
    except:
      hashsum = "Error!"
    return hashsum

# execute command: return True is everything OK, False otherwise
def execute_command(command,logfile,logfile_name,env=None):
  try:
    #subprocess.run(command.split(),stdout=logfile,stderr=logfile,check=True,env=env)
    subprocess.check_call(command.split(),stdout=logfile,stderr=logfile,env=env)
  except subprocess.CalledProcessError:
    print("Error executing command line:")
    print("\t"+ command)
    print("Check log file: " + logfile_name)
    return False
  return True



if __name__ == '__main__':
    main()
